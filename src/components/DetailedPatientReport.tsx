import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { useToast } from "@/hooks/use-toast";
import { 
  FileText, 
  ArrowLeft, 
  Printer, 
  Download,
  MessageSquare,
  Calendar,
  User,
  Heart,
  Activity,
  AlertTriangle,
  CheckCircle,
  Target,
  MapPin,
  Phone,
  Mail
} from "lucide-react";
import { PatientData } from "@/lib/storage";

interface DetailedPatientReportProps {
  patient: PatientData;
  onBack: () => void;
}

export default function DetailedPatientReport({ patient, onBack }: DetailedPatientReportProps) {
  const [isPrinting, setIsPrinting] = useState(false);
  const { toast } = useToast();

  const handlePrint = () => {
    setIsPrinting(true);
    setTimeout(() => {
      window.print();
      setIsPrinting(false);
      toast({
        title: "Print Initiated",
        description: "Patient report is being prepared for printing.",
      });
    }, 1000);
  };

  const handleWhatsAppShare = () => {
    const reportSummary = `
🏥 *Patient Health Report*

👤 *Patient:* ${patient.personalInfo.name}
🆔 *Aadhaar:* ${patient.aadhaarNumber.slice(0, 4)}-****-${patient.aadhaarNumber.slice(-4)}
📅 *Report Date:* ${new Date().toLocaleDateString()}

⚠️ *Risk Level:* ${patient.analysis?.riskLevel?.toUpperCase() || 'N/A'}
📊 *Risk Score:* ${patient.analysis?.riskScore || 'N/A'}/100

🔍 *Key Findings:*
${patient.analysis?.reportFindings?.map((finding: string) => `• ${finding}`).join('\n') || 'No findings available'}

💊 *Recommendations:*
${patient.analysis?.recommendations?.map((rec: string) => `• ${rec}`).join('\n') || 'No recommendations available'}

📋 *Next Steps:*
${patient.analysis?.nextSteps?.map((step: string) => `• ${step}`).join('\n') || 'No next steps available'}

---
*Generated by Migrant Health Buddy System*
    `;

    const whatsappUrl = `https://wa.me/${patient.mobileNumber.replace(/\D/g, '')}?text=${encodeURIComponent(reportSummary)}`;
    window.open(whatsappUrl, '_blank');
    
    toast({
      title: "WhatsApp Share",
      description: "Opening WhatsApp to share patient report.",
    });
  };

  const getRiskColor = (riskLevel: string) => {
    switch (riskLevel) {
      case 'high': return 'bg-destructive/10 text-destructive border-destructive/20';
      case 'medium': return 'bg-warning/10 text-warning border-warning/20';
      case 'low': return 'bg-success/10 text-success border-success/20';
      default: return 'bg-muted text-muted-foreground';
    }
  };

  const getRiskIcon = (riskLevel: string) => {
    switch (riskLevel) {
      case 'high': return <AlertTriangle className="h-5 w-5" />;
      case 'medium': return <Activity className="h-5 w-5" />;
      case 'low': return <CheckCircle className="h-5 w-5" />;
      default: return <Heart className="h-5 w-5" />;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-muted/30 to-background p-4">
      <div className="max-w-4xl mx-auto space-y-6">
        {/* Header */}
        <Card className="print:hidden">
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="flex items-center">
                  <FileText className="h-5 w-5 mr-2 text-primary" />
                  Detailed Patient Report
                </CardTitle>
                <CardDescription>
                  Comprehensive health analysis and recommendations
                </CardDescription>
              </div>
              <div className="flex items-center space-x-2">
                <Button variant="outline" onClick={handlePrint} disabled={isPrinting}>
                  <Printer className="h-4 w-4 mr-2" />
                  {isPrinting ? "Printing..." : "Print Report"}
                </Button>
                <Button variant="outline" onClick={handleWhatsAppShare}>
                  <MessageSquare className="h-4 w-4 mr-2" />
                  Share via WhatsApp
                </Button>
                <Button variant="outline" onClick={onBack}>
                  <ArrowLeft className="h-4 w-4 mr-2" />
                  Back
                </Button>
              </div>
            </div>
          </CardHeader>
        </Card>

        {/* Report Content */}
        <div className="space-y-6 print:space-y-4">
          {/* Patient Information */}
          <Card className="print:shadow-none print:border-2">
            <CardHeader className="print:pb-2">
              <CardTitle className="flex items-center text-lg">
                <User className="h-5 w-5 mr-2" />
                Patient Information
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <div className="flex items-center">
                    <span className="font-semibold w-24">Name:</span>
                    <span>{patient.personalInfo.name || 'Not provided'}</span>
                  </div>
                  <div className="flex items-center">
                    <span className="font-semibold w-24">Age:</span>
                    <span>{patient.personalInfo.age || 'Not provided'}</span>
                  </div>
                  <div className="flex items-center">
                    <span className="font-semibold w-24">Gender:</span>
                    <span>{patient.personalInfo.gender || 'Not provided'}</span>
                  </div>
                  <div className="flex items-center">
                    <span className="font-semibold w-24">Occupation:</span>
                    <span>{patient.personalInfo.occupation || 'Not provided'}</span>
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="flex items-center">
                    <span className="font-semibold w-24">State:</span>
                    <span>{patient.personalInfo.state || 'Not provided'}</span>
                  </div>
                  <div className="flex items-center">
                    <span className="font-semibold w-24">City:</span>
                    <span>{patient.personalInfo.city || 'Not provided'}</span>
                  </div>
                  <div className="flex items-center">
                    <span className="font-semibold w-24">Aadhaar:</span>
                    <span>{patient.aadhaarNumber.slice(0, 4)}-****-{patient.aadhaarNumber.slice(-4)}</span>
                  </div>
                  <div className="flex items-center">
                    <span className="font-semibold w-24">Mobile:</span>
                    <span>{patient.mobileNumber}</span>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Risk Assessment */}
          {patient.analysis && (
            <Card className="print:shadow-none print:border-2">
              <CardHeader className="print:pb-2">
                <CardTitle className="flex items-center text-lg">
                  {getRiskIcon(patient.analysis.riskLevel)}
                  <span className="ml-2">Risk Assessment</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-xl font-bold">Overall Risk Level</h3>
                    <Badge className={`mt-2 text-lg px-4 py-2 ${getRiskColor(patient.analysis.riskLevel)}`}>
                      {patient.analysis.riskLevel?.toUpperCase() || 'N/A'}
                    </Badge>
                  </div>
                  <div className="text-right">
                    <h3 className="text-xl font-bold">Risk Score</h3>
                    <p className="text-2xl font-bold mt-2">{patient.analysis.riskScore || 'N/A'}/100</p>
                  </div>
                </div>
                
                {patient.analysis.riskFactors && patient.analysis.riskFactors.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2">Identified Risk Factors:</h4>
                    <ul className="space-y-1">
                      {patient.analysis.riskFactors.map((factor: string, index: number) => (
                        <li key={index} className="flex items-start text-sm">
                          <AlertTriangle className="h-4 w-4 mr-2 text-warning flex-shrink-0 mt-0.5" />
                          {factor}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </CardContent>
            </Card>
          )}

          {/* Survey Data */}
          {patient.surveyData && (
            <Card className="print:shadow-none print:border-2">
              <CardHeader className="print:pb-2">
                <CardTitle className="flex items-center text-lg">
                  <FileText className="h-5 w-5 mr-2" />
                  Health Survey Results
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {patient.surveyData.symptoms && patient.surveyData.symptoms.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2">Current Symptoms:</h4>
                    <div className="flex flex-wrap gap-2">
                      {patient.surveyData.symptoms.map((symptom: string, index: number) => (
                        <Badge key={index} variant="outline" className="bg-warning/10">
                          {symptom}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}

                {patient.surveyData.healthHistory?.chronicDiseases && patient.surveyData.healthHistory.chronicDiseases.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2">Chronic Conditions:</h4>
                    <div className="flex flex-wrap gap-2">
                      {patient.surveyData.healthHistory.chronicDiseases.map((disease: string, index: number) => (
                        <Badge key={index} variant="outline" className="bg-destructive/10">
                          {disease}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}

                {patient.surveyData.healthHistory?.medications && (
                  <div>
                    <h4 className="font-semibold mb-2">Current Medications:</h4>
                    <p className="text-sm">{patient.surveyData.healthHistory.medications}</p>
                  </div>
                )}

                {patient.surveyData.healthHistory?.allergies && (
                  <div>
                    <h4 className="font-semibold mb-2">Known Allergies:</h4>
                    <p className="text-sm">{patient.surveyData.healthHistory.allergies}</p>
                  </div>
                )}
              </CardContent>
            </Card>
          )}

          {/* Medical Reports */}
          {patient.reports && patient.reports.length > 0 && (
            <Card className="print:shadow-none print:border-2">
              <CardHeader className="print:pb-2">
                <CardTitle className="flex items-center text-lg">
                  <FileText className="h-5 w-5 mr-2" />
                  Medical Reports Analysis
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {patient.reports.map((report: any, index: number) => (
                  <div key={index} className="border rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="font-semibold">{report.name}</h4>
                      <span className="text-sm text-muted-foreground">
                        {new Date(report.uploadDate).toLocaleDateString()}
                      </span>
                    </div>
                    
                    {report.content?.type === 'Blood Test' && (
                      <div className="space-y-2">
                        <h5 className="font-medium">Blood Test Results:</h5>
                        <div className="grid md:grid-cols-2 gap-2 text-sm">
                          {Object.entries(report.content.values).map(([key, value]: [string, any]) => (
                            <div key={key} className="flex justify-between">
                              <span className="capitalize">{key.replace(/([A-Z])/g, ' $1')}:</span>
                              <span className="font-medium">{value}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {report.content?.type === 'X-Ray' && (
                      <div className="space-y-2">
                        <h5 className="font-medium">X-Ray Findings:</h5>
                        <p className="text-sm">{report.content.findings}</p>
                        <p className="text-sm font-medium">Impression: {report.content.impression}</p>
                      </div>
                    )}
                  </div>
                ))}
              </CardContent>
            </Card>
          )}

          {/* AI Analysis */}
          {patient.analysis && (
            <Card className="print:shadow-none print:border-2">
              <CardHeader className="print:pb-2">
                <CardTitle className="flex items-center text-lg">
                  <Activity className="h-5 w-5 mr-2" />
                  AI Analysis & Recommendations
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {patient.analysis.summary && (
                  <div>
                    <h4 className="font-semibold mb-2">Health Summary:</h4>
                    <p className="text-sm">{patient.analysis.summary}</p>
                  </div>
                )}

                {patient.analysis.reportFindings && patient.analysis.reportFindings.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2">Report Findings:</h4>
                    <ul className="space-y-1">
                      {patient.analysis.reportFindings.map((finding: string, index: number) => (
                        <li key={index} className="flex items-start text-sm">
                          <CheckCircle className="h-4 w-4 mr-2 text-success flex-shrink-0 mt-0.5" />
                          {finding}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {patient.analysis.recommendations && patient.analysis.recommendations.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2">Recommendations:</h4>
                    <ul className="space-y-1">
                      {patient.analysis.recommendations.map((rec: string, index: number) => (
                        <li key={index} className="flex items-start text-sm">
                          <Target className="h-4 w-4 mr-2 text-primary flex-shrink-0 mt-0.5" />
                          {rec}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {patient.analysis.nextSteps && patient.analysis.nextSteps.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2">Next Steps:</h4>
                    <ol className="space-y-1">
                      {patient.analysis.nextSteps.map((step: string, index: number) => (
                        <li key={index} className="flex items-start text-sm">
                          <span className="flex-shrink-0 w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs mr-3 mt-0.5">
                            {index + 1}
                          </span>
                          {step}
                        </li>
                      ))}
                    </ol>
                  </div>
                )}
              </CardContent>
            </Card>
          )}

          {/* Health Goals */}
          {patient.healthGoals && patient.healthGoals.length > 0 && (
            <Card className="print:shadow-none print:border-2">
              <CardHeader className="print:pb-2">
                <CardTitle className="flex items-center text-lg">
                  <Target className="h-5 w-5 mr-2" />
                  Health Goals
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-3">
                  {patient.healthGoals.map((goal: any, index: number) => (
                    <div key={index} className="border rounded-lg p-3">
                      <div className="flex items-start justify-between mb-2">
                        <h4 className="font-semibold">{goal.title}</h4>
                        <Badge className={getRiskColor(goal.priority)}>
                          {goal.priority}
                        </Badge>
                      </div>
                      <p className="text-sm text-muted-foreground mb-2">{goal.description}</p>
                      <div className="flex items-center text-xs text-muted-foreground">
                        <Calendar className="h-3 w-3 mr-1" />
                        Deadline: {goal.deadline}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Footer */}
        <Card className="print:shadow-none print:border-2 print:mt-8">
          <CardContent className="pt-6">
            <Separator className="mb-4" />
            <div className="text-center text-sm text-muted-foreground">
              <p>Report generated on {new Date().toLocaleString()}</p>
              <p>Migrant Health Buddy System - AI-Driven Health Analysis</p>
              <div className="flex items-center justify-center mt-2 space-x-4">
                <div className="flex items-center">
                  <Phone className="h-3 w-3 mr-1" />
                  <span>Helpline: +91 1800-123-4567</span>
                </div>
                <div className="flex items-center">
                  <Mail className="h-3 w-3 mr-1" />
                  <span>support@healthbuddy.com</span>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Print Styles */}
      <style jsx global>{`
        @media print {
          .print\\:hidden { display: none !important; }
          .print\\:shadow-none { box-shadow: none !important; }
          .print\\:border-2 { border-width: 2px !important; }
          .print\\:space-y-4 > * + * { margin-top: 1rem !important; }
          .print\\:pb-2 { padding-bottom: 0.5rem !important; }
          .print\\:mt-8 { margin-top: 2rem !important; }
          body { background: white !important; }
          .bg-gradient-to-br { background: white !important; }
        }
      `}</style>
    </div>
  );
}
